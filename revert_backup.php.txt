<?php

define('PUN_ROOT', dirname(__FILE__).'/');
if (is_dir(PUN_ROOT.'plugins/patcher/'))
	define('PATCHER_ROOT', PUN_ROOT.'plugins/patcher/');
elseif (is_dir(PUN_ROOT.'patcher/plugins/patcher/'))
	define('PATCHER_ROOT', PUN_ROOT.'patcher/plugins/patcher/');
define('BACKUPS_DIR', PUN_ROOT.'backups/');

require PATCHER_ROOT.'filesystem.class.php';
require PATCHER_ROOT.'config.php';

$fs = new FILESYSTEM(isset($ftp_data) ? $ftp_data : null);

$revert = isset($_GET['revert']) ? basename($_GET['revert']) : null;

if (!isset($revert))
{
	$backups = array();
	$dir = dir(BACKUPS_DIR);
	while ($cur_file = $dir->read())
	{
		if (substr($cur_file, 0, 1) != '.' && substr($cur_file, strlen($cur_file) - 4) == '.zip')
			$backups[] = '<option value="'.htmlspecialchars($cur_file).'">'.htmlspecialchars($cur_file). '</option>';
	}
	@sort($backups);
	if (count($backups) > 0)
	echo '<form method="get" action=""><select name="revert">'.implode("\n\t\t\t\t", $backups).'</select><input type="submit" value="Revert"></form>';
}
else
{
	if (!file_exists(BACKUPS_DIR.$revert))
	{
		echo 'File does not exist'.$revert;
		exit;
	}
	revert($revert);
}



function revert($file)
{
	global $pun_config, $lang_admin_plugin_patcher, $fs;

	$dirs_to_check = array('./', 'include', 'lang/English');
	foreach ($dirs_to_check as $cur_dir)
	{
		if (!$fs->is_writable(PUN_ROOT.$cur_dir))
		{
			echo 'Directory not writable '.$cur_dir;
			exit;
		}
	}

	if (file_exists(PUN_ROOT.'patcher_config.php'))
		$fs->delete(PUN_ROOT.'patcher_config.php');

	$files = zip_extract(BACKUPS_DIR.$file, PUN_ROOT, true);
	if (!$files)
	{
		echo 'Failed to extract file';
		exit;
	}

	echo 'Done';
	exit;
}


function zip_extract($file, $extract_to, $list_files = false)
{
	global $lang_admin_plugin_patcher, $fs;
	$files = array();
	if (class_exists('ZipArchive'))
	{
		$zip = new ZipArchive;
		if ($zip->open($file) !== true)
			return false;

		//$zip->extractTo($extract_to);

		$i = 0;
		while ($cur_file = $zip->statIndex($i++))
		{
			$fp = $zip->getStream($cur_file['name']);
			if (!$fp)
				message('Failed');
			$contents = '';
			while (!feof($fp))
				$contents .= fread($fp, 2);
			fclose($fp);

			if (in_array(substr($cur_file['name'], -1), array('/', '\\')))
				$fs->mkdir($extract_to.'/'.$cur_file['name']);
			else
				$fs->put($extract_to.'/'.$cur_file['name'], $contents);
			$files[] = $cur_file['name'];
		}

		$zip->close();
	}
	else
	{
		require_once PATCHER_ROOT.'pclzip.lib.php';

		$archive = new PclZip($file);
		$p_list = $archive->extract(PCLZIP_OPT_EXTRACT_AS_STRING);
		foreach ($p_list as $cur_file)
		{
			if ($cur_file['folder'] == 1)
				$fs->mkdir($extract_to.'/'.$cur_file['stored_filename']);
			else
				$fs->put($extract_to.'/'.$cur_file['stored_filename'], $cur_file['content']);

			$files[] = $cur_file['stored_filename'];
		}
	}
	return ($list_files ? $files : true);
}